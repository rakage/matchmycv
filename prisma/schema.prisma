generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role        @default(USER)
  stripeId      String?     @unique
  plan          Plan        @default(FREE)
  credits       Int         @default(5)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  analyses      Analysis[]
  documents     Document[]
  jobTargets    JobTarget[]
  sessions      Session[]
  usage         Usage[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id         String       @id @default(cuid())
  userId     String
  title      String
  storageKey String
  mimeType   String
  fileSize   Int
  rawText    String
  structured String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  analyses   Analysis[]
  cvAnalyses CVAnalysis[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions   Version[]
}

model JobTarget {
  id           String     @id @default(cuid())
  userId       String
  title        String
  company      String?
  rawText      String
  skills       String
  requirements String
  seniority    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  analyses     Analysis[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CVAnalysis {
  id                 String   @id @default(cuid())
  documentId         String
  overallScore       Int
  overallGrade       String
  summary            String
  urgentFixes        String
  criticalFixes      String
  optionalFixes      String
  experienceAnalysis String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  document           Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Analysis {
  id           String    @id @default(cuid())
  userId       String
  documentId   String
  jobTargetId  String
  overallScore Int
  subScores    String
  gaps         String
  suggestions  String
  createdAt    DateTime  @default(now())
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  jobTarget    JobTarget @relation(fields: [jobTargetId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Version {
  id         String   @id @default(cuid())
  documentId String
  label      String
  content    String
  diff       String?
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Usage {
  id        String    @id @default(cuid())
  userId    String
  type      UsageType
  count     Int       @default(1)
  metadata  String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO
}

enum UsageType {
  ANALYSIS
  EXPORT_PDF
  EXPORT_DOCX
  AI_EDIT
}
